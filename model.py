# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Q6yGwrrpGeri7mJjzdyHmICY4yE_zdJ4
"""



"""# Submission Pertama: Menyelesaikan Permasalahan Human Resources

- Nama: Kurniati Laeli Munifah
- Email: k.laelimunifah@gmail.com
- Id Dicoding: klmunifah

## Persiapan

### Menyiapkan library yang dibutuhkan

Beberapa library yang dibutuhkan dalam keseluruhan proyek ini dimasukkan dengan menjalankan baris berikut.
"""

!pip uninstall scikit-learn -y
!pip install -U scikit-learn
!pip install squarify
!pip install category_encoders
!pip install joblib
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import sklearn
import squarify
from category_encoders import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.model_selection import train_test_split
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.metrics import roc_auc_score , accuracy_score , confusion_matrix
import joblib

"""### Menyiapkan data yang akan digunakan

Sumber data merupakan data pegawai Jaya-Jaya Maju yang berasal dari link: https://raw.githubusercontent.com/dicodingacademy/dicoding_dataset/main/employee/employee_data.csv.

Secara keseluruhan data ini memiliki 35 kolom yang kemudian di simpan dalam dataframe employee_df.
"""

employee_df = pd.read_csv("https://raw.githubusercontent.com/dicodingacademy/dicoding_dataset/main/employee/employee_data.csv",
                          encoding="windows-1252")
employee_df.head(10)

"""## Data Understanding

Untuk memahami data dilakukan beberapa pengecekan seperti pengecekan ukuran data dengan menggunakan shape() dan mengecek tipe data dan missing value dengan info(). Dapat dilihat employee_df memiliki ukuran 1470 baris dengan 35 kolom. Serta terdapat missing value pada kolom Attrition.
"""

# mengecek ukuran data
employee_df.shape

# Mengecek tipe data dan missing value
employee_df.info()

"""## Data Preparation / Preprocessing

Selanjutnya dilakukan proses penyiapan data. Pada kolom Attrition terdapat 412 data yang hilang atau NaN, setelah melihat employee_df terdapat 42 baris NaN pada kolom Attrition, sehingga baris tersebut dihapus dari employee_df.
"""

# menghitung missing value
missing_value_counts = employee_df.isnull().sum()
missing_value_counts

# menghapus baris dengan missing values
employee_df= employee_df.dropna()
employee_df

# mengecek tipe data dan jumlah baris
employee_df.info()

employee_df.nunique()

"""Menambah kolom yang mengubah beberapa data numerical menjadi categorical seperti
- Status dari Attrition : 0-Active , 1-Inactive
- Edutxt dari Education : 1-Below College, 2-College, 3-Bachelor, 4-Master,5-Doctor
- Salary Category : Under 5000, 5000-9999, 10000-14999, dan Above 15000

"""

employee_df["Status"] = employee_df.Attrition.apply(lambda x: "Active" if x == 0 else "Inactive")
employee_df["Edutxt"] = employee_df.Education.apply(lambda x: "Below College" if x == 1
                                                      else ("College" if x == 2
                                                            else ("Bachelor" if x == 3
                                                                  else ("Master" if x == 4
                                                                        else "Doctor"))))
employee_df["SalaryCategory"] = employee_df["MonthlyIncome"].apply(lambda x: "Under 5000" if x < 5000
                                                      else ("5000-9999" if (x >= 5000 and x<9999)
                                                            else ("10000-14999" if (x >= 10000 and x<15000)
                                                                  else "Above 15000")))

"""Mengekstraksi kolom yang akan digunakan seperti EmployeeId, Attrition,Status, Age, Gender, Education, EducationField, Edutxt, JobLevel, Department,JobRole, BusinessTravel, MonthlyIncome, SalaryCategory, PercentSalaryHike,  TotalWorkingYears, MaritalStatus, PerformanceRating, JobSatisfaction, EnvironmentSatisfaction, RelationshipSatisfaction, dan WorkLifeBalance."""

employee_df = employee_df[["EmployeeId", "Attrition", "Status", "Age", "Gender", "Education",
                           "EducationField", "Edutxt", "JobLevel", "Department", "JobRole", "BusinessTravel",
                           "MonthlyIncome", "SalaryCategory", "PercentSalaryHike", "TotalWorkingYears", "OverTime", "MaritalStatus",  "PerformanceRating",
                           "JobSatisfaction", "EnvironmentSatisfaction", "RelationshipSatisfaction", "WorkLifeBalance"]]
employee_df

"""## EDA dan Visualisasi Data

Pada tahap ini dilakukan eksplorasi data dan visualisasi data untuk menjawab beberapa pertanyaan berikut.

### 1. Berapa jumlah keseluruhan pegawai di Perusahaan Jaya Jaya Maju?

Setelah menghapus data yang memiliki nilai NaN terdapat 1058 orang karyawan yang statusnya jelas pada employee_df.
"""

# Jumlah total karyawan tahun ini
employee_total = len(employee_df["EmployeeId"])
print("Jumlah karyawan tahun ini adalah " + str(employee_total) + " orang.")

"""### 2. Bagaimana Perbandingan Jumlah karyawan aktif dan keluar?

Dengan menjalankan baris berikut, diketahui terdapat 179 orang karyawan yang tidak aktif dan 879 karyawan yang masih aktif.
"""

employee_status = employee_df.groupby(by = ["Status"] ).agg({"EmployeeId" : "count",
            }).sort_values(by = ["EmployeeId"], ascending = True)
employee_status = employee_status.reset_index()
employee_status = employee_status.rename(columns = {"EmployeeId":"Total"})
employee_status

"""Berikut data perbandingan jika ditampilkan pada pie chart"""

plt.pie(employee_status["Total"], autopct="%.0f%%", labels = employee_status["Status"])

"""Selanjutnya dilakukan perhitungan Attrition Rate dari data karyawan sebagai berikut."""

Attrition_rate = 100* (179 / ((1058 + 879) / 2))
print("Attrition Rate sebesar " + str(round(Attrition_rate, 2)) + "%")

"""### 3. Bagaimana sebaran umur karyawan?

Selanjutnya kita ingin melihat sebaran umur karyawan. Dengan menjalankan kode berikut dapat kita ketahui jumlah karyawan berdasarkan umurnya.
"""

employee_age= employee_df.groupby(by = ["Age"] ).agg({"EmployeeId" : "count",
            }).sort_values(by = ["Age"], ascending = True)
employee_age = employee_age.reset_index()
employee_age = employee_age.rename(columns = {"EmployeeId":"Total"})
employee_age

employee_age_status= employee_df.groupby(by = ["Age", "Status"] ).agg({"EmployeeId" : "count",
            }).sort_values(by = ["Age"], ascending = True)
employee_age_status = employee_age_status.reset_index()
employee_age_status = employee_age_status.rename(columns = {"EmployeeId":"Total"})
employee_age_status

sns.catplot(data=employee_age_status, kind="bar",
    x="Age", y="Total", hue="Status",
    errorbar="sd", alpha=.6, height=6)
plt.xticks(rotation=45, size = 7)
plt.title("Employees by Age")

"""Setelah melihat grafik sebaran umur, dapat kita simpulkan bahwa karyawan yang memutuskan untuk keluar (inactive) lebih banyak berasal dari kalangan umur 25-35 tahun.

### 3. Bagaimana perbandingan jumlah karyawan berdasarkan gender dan statusnya?

Selanjutnya dengan menjalankan kode berikut dapat kita ketahui sebaran gender karyawan.
"""

employee_gender_status = employee_df.groupby(by = ['Gender', 'Status'] ).agg({"EmployeeId" : "count",
            }).sort_values(by = ['Gender'], ascending = True)
employee_gender_status = employee_gender_status.reset_index()
employee_gender_status = employee_gender_status.rename(columns = {'EmployeeId':'Total'})
employee_gender_status

fig = px.sunburst(employee_gender_status, path=["Gender", "Status"], values="Total")
fig.show()

"""Dari grafik tersebut dapat kita simpulkan bahwa jumlah karyawan laki-laki lebih banyak dibandingkan perempuan, begitu juga jumlah karyawan laki laki yang memutuskan keluar (inactive) lebih banyak dibandingkan jumlah karyawan perempuan yang memutuskan keluar (inactive)

### 4. Bagaimana sebaran tingkatan pendidikan karyawan?

Selanjutnya dengan menjalankan kode berikut dapat kita ketahui sebaran tingkat pendidikan karyawan.
"""

employee_education_status = employee_df.groupby(by = ["Education", "Edutxt", "Status"] ).agg({"EmployeeId" : "count",
            }).sort_values(by = ["Education"], ascending = True)
employee_education_status = employee_education_status.reset_index()
employee_education_status = employee_education_status.rename(columns = {"EmployeeId":"Total"})
employee_education_status = employee_education_status.drop(columns = ["Education"])
employee_education_status

sns.catplot(
    data=employee_education_status, kind="bar",
    y="Edutxt", x="Total", hue="Status", orient="h",
    errorbar="sd", alpha=.6, height=6)
plt.title("Employees by Education Level")

"""Dari grafik tersebut dapat kita simpulkan sebagian besar karyawan merupakan lulusan sarjana. Selain itu, karyawan yang memutuskan keluar juga paling banyak berasal dari lulusan sarjana.

### 7. Bagaimana sebaran bidang pendidikan yang ditempuh karyawan

Selanjutnya dengan menjalankan kode berikut dapat kita ketahui sebaran bidang pendidikan yang ditempuh karyawan.
"""

employee_edufield = employee_df.groupby(by = ["EducationField"] ).agg({"EmployeeId" : "count",
            }).sort_values(by = ["EmployeeId"], ascending = True)
employee_edufield = employee_edufield.reset_index()
employee_edufield = employee_edufield.rename(columns = {"EmployeeId":"Total"})
employee_edufield

employee_edufield_status = employee_df.groupby(by = ["EducationField","Status"] ).agg({"EmployeeId" : "count",
            }).sort_values(by = ["EducationField"], ascending = True)
employee_edufield_status = employee_edufield_status.reset_index()
employee_edufield_status = employee_edufield_status.rename(columns = {"EmployeeId":"Total"})
employee_edufield_status

squarify.plot(sizes=employee_edufield["Total"], label = employee_edufield["EducationField"],alpha=0.8)
plt.title("Employees by Education Field")
plt.axis("off")

"""Dari grafik tersebut dapat kita simpulkan sebagian besar karyawan merupakan menempuh pendidikan Life Sciences. Bidang pendikan life sciences juga menyumbang karyawan keluar paling banyak.

### 6. Bagaimana sebaran department karyawan?

Selanjutnya dengan menjalankan kode berikut dapat kita ketahui department asal karyawan.
"""

employee_department = employee_df.groupby(by = ["Department"] ).agg({"EmployeeId" : "count",
            }).sort_values(by = ["EmployeeId"], ascending = True)
employee_department = employee_department.reset_index()
employee_department = employee_department.rename(columns = {"EmployeeId":"Total"})
employee_department

employee_department_status = employee_df.groupby(by = ["Department","Status"] ).agg({"EmployeeId" : "count",
            }).sort_values(by = ["Department"], ascending = True)
employee_department_status = employee_department_status.reset_index()
employee_department_status = employee_department_status.rename(columns = {"EmployeeId":"Total"})
employee_department_status

sns.catplot(
    data=employee_department_status, kind="bar",
    x="Department", y="Total", hue="Status",
    errorbar="sd", alpha=.6, height=6)
plt.title("Employees by Department")
plt.show()

"""Dari grafik tersebut dapat kita simpulkan jumlah karyawan terbanyak berasal dari department Research & Development. Department ini juga menyumbang karyawan keluar terbanyak.

### 7. Bagaimana sebaran Jabatan Karyawan?

Selanjutnya dengan menjalankan kode berikut dapat kita ketahui jabatan karyawan.
"""

employee_jobrole = employee_df.groupby(by = ["JobRole"] ).agg({"EmployeeId" : "count",
            }).sort_values(by = ["EmployeeId"], ascending = True)
employee_jobrole = employee_jobrole.reset_index()
employee_jobrole = employee_jobrole.rename(columns = {"EmployeeId":"Total"})
employee_jobrole

employee_jobrole_status = employee_df.groupby(by = ["JobRole","Status"] ).agg({"EmployeeId" : "count",
            }).sort_values(by = ["JobRole"], ascending = True)
employee_jobrole_status = employee_jobrole_status.reset_index()
employee_jobrole_status = employee_jobrole_status.rename(columns = {"EmployeeId":"Total"})
employee_jobrole_status

squarify.plot(sizes=employee_jobrole["Total"], label = employee_jobrole["JobRole"],alpha=0.8)
plt.title("Employees by Job Role")
plt.axis("off")

"""Dari grafik tersebut dapat kita simpulkan jumlah karyawan terbanyak memiliki jabatan sebagai Sales Executive. Sedangkan jumlah karyawan yang keluar terbanyak berasal dari jabatan Laboratory Technician.

### 8. Bagaimana sebaran tingkat jabatan karyawan?

Selanjutnya dengan menjalankan kode berikut dapat kita ketahui level jabatan karyawan.
"""

employee_joblevel_status = employee_df.groupby(by = ["JobLevel", "Status"] ).agg({"EmployeeId" : "count"
            }).sort_values(by = ["JobLevel"], ascending = False)
employee_joblevel_status = employee_joblevel_status.reset_index()
employee_joblevel_status = employee_joblevel_status.rename(columns = {"EmployeeId":"Total"})
employee_joblevel_status

sns.catplot(
    data=employee_joblevel_status, kind="bar",
    y="JobLevel", x="Total", hue="Status", orient ="h", order = employee_joblevel_status["JobLevel"],
    errorbar="sd", alpha=.6, height=6)
plt.title("Employees by Job Level")
plt.show()

"""Dari grafik dapat kita lihat bahwa semakin rendah level jabatan karyawan semakin banyak karyawan yang keluar.

### 9. Berapa banyak karyawan yang sering melakukan perjalanan bisnis?

Selanjutnya dengan menjalankan kode berikut dapat kita ketahui sebaran seberapa sering karyawan melakukan perjalanan bisnis.
"""

employee_businesstravel_status = employee_df.groupby(by = ["BusinessTravel","Status"] ).agg({"EmployeeId" : "count",
            }).sort_values(by = ["BusinessTravel"], ascending = True)
employee_businesstravel_status = employee_businesstravel_status.reset_index()
employee_businesstravel_status = employee_businesstravel_status.rename(columns = {"EmployeeId":"Total"})
employee_businesstravel_status

fig = px.sunburst(employee_businesstravel_status, path=["BusinessTravel", "Status"], values="Total")
fig.show()

"""Berdasarkan grafik tersebut, kebanyakan karyawan jarang melakukan perjalanan bisnis. Karyawan yang jarang melakukan perjalanan bisnis juga paling banyak keluar dari perusahaan.

### 10. Bagaimana status pernikahan karyawan?

Selanjutnya dengan menjalankan kode berikut dapat kita ketahui sebaran status pernikahan karyawan.
"""

employee_marital_status = employee_df.groupby(by = ["MaritalStatus", "Status"] ).agg({"EmployeeId" : "count",
            }).sort_values(by = ["MaritalStatus"], ascending = True)
employee_marital_status = employee_marital_status.reset_index()
employee_marital_status = employee_marital_status.rename(columns = {"EmployeeId":"Total"})
employee_marital_status

fig = px.sunburst(employee_marital_status, path=["MaritalStatus", "Status"], values="Total")
fig.show()

"""Berdasarkan grafik tersebut kebanyakan karyawan sudah menikah, namun karyawan yang masih single yang paling banyak keluar dari perusahaan.

### 11. Berapa rata-rata gaji perbulan dan  sebaran kategori penghasilan karyawan?

Selanjutnya dengan menjalankan kode berikut dapat kita ketahui sebaran gaji karyawan.
"""

employee_df[["MonthlyIncome", "TotalWorkingYears"]].describe()

employee_salarycategory_status = employee_df.groupby(by = ["SalaryCategory", "Status"] ).agg({"EmployeeId" : "count", "MonthlyIncome": "min"
            }).sort_values(by = ["MonthlyIncome"], ascending = False)
employee_salarycategory_status = employee_salarycategory_status.reset_index()
employee_salarycategory_status = employee_salarycategory_status.rename(columns = {"EmployeeId":"Total"})
employee_salarycategory_status = employee_salarycategory_status.drop(columns = ["MonthlyIncome"])
employee_salarycategory_status

sns.catplot(
    data=employee_salarycategory_status, kind="bar",
    y="SalaryCategory", x="Total", hue="Status", orient ="h",
    errorbar="sd", alpha=.6, height=6)
plt.title("Employees by Salary Category")
plt.show()

"""Berdasarkan hasil analisis data karyawan memiliki rata rata gaji 6625 USD, dan karyawan yang paling banyak keluar berasal dari golongan gaji di bawah 5000 USD.	Sehingga karyawan bergaji di bawah rata-rata cenderung lebih mudah memutuskan keluar.

### 12. Bagaimana sebaran persentase kenaikan gaji karyawan?

Selanjutnya dengan menjalankan kode berikut dapat kita ketahui sebaran kenaikan gaji karyawan.
"""

employee_salaryhike_status = employee_df.groupby(by = ["PercentSalaryHike", "Status"] ).agg({"EmployeeId" : "count"
            }).sort_values(by = ["PercentSalaryHike"], ascending = False)
employee_salaryhike_status = employee_salaryhike_status.reset_index()
employee_salaryhike_status = employee_salaryhike_status.rename(columns = {"EmployeeId":"Total"})
employee_salaryhike_status

sns.catplot(
    data=employee_salaryhike_status, kind="bar",
    y="PercentSalaryHike", x="Total", hue="Status", orient ="h", order = employee_salaryhike_status["PercentSalaryHike"],
    errorbar="sd", alpha=.6, height=6)
plt.title("Employees by Percent Salary Hike")
plt.show()

"""Dari grafik diatas kebanyakan karyawan mendapat peningkatan persentase kenaikan gaji yang rendah, karyawan dengan persentase peningkatan kenaikan gaji yang rendah jugalah yang cenderung memutuskan keluar.

### 13. Berapa rata-rata lama kerja karyawan di perusahaan?
"""

employee_df[["TotalWorkingYears"]].describe()

"""Rata-rata lama kerja karyawan di perusahaan tersebut adalah 11.4 tahun

### 14. Berapa banyak karyawan yang bekerja overtime?

Dengan menjalankan perintah berikut kita dapat mengetahui jumlah karyawan yang bekerja overtime
"""

employee_overtime_status = employee_df.groupby(by = ["OverTime", "Status"] ).agg({"EmployeeId" : "count",
            }).sort_values(by = ["OverTime"], ascending = True)
employee_overtime_status = employee_overtime_status.reset_index()
employee_overtime_status = employee_overtime_status.rename(columns = {"EmployeeId":"Total"})
employee_overtime_status

fig = px.sunburst(employee_overtime_status, path=["OverTime", "Status"], values="Total")
fig.show()

"""Berdasarkan grafik tersebut kebanyakan karyawan tidak bekerja secara overtime. Akan tetapi, jumlah karyawan yang keluar paling banyak berasal dari karyawan yang bekerja overtime.

### 13. Bagaimana kualitas kerja karyawan dan tingkat kepuasan karyawan dari skala 1-5?
"""

employee_df[["PerformanceRating", "JobSatisfaction", "WorkLifeBalance", "EnvironmentSatisfaction", "RelationshipSatisfaction"]] = employee_df[["PerformanceRating", "JobSatisfaction", "WorkLifeBalance", "EnvironmentSatisfaction", "RelationshipSatisfaction"]].apply(lambda x : (x*1.25))
employee_df[["PerformanceRating", "JobSatisfaction", "WorkLifeBalance", "EnvironmentSatisfaction", "RelationshipSatisfaction"]].mean()

"""Dapat kita lihat bahwa kualitas kerja karyawan dan tingkat kepuasan karyawan berada pada nilai 3,3 -3,9. Dengan kepuasan terhadap lingkungan kerja memiliki nilai paling rendah.

### Kesimpulan dan saran
1.   Kesimpulan
       *   Jumlah keseluruhan karyawan ada 1058 orang
       *   Terdapat sekitar 17% karyawan yang keluar dengan Attrition Rate sebesar 18.48%
       *   Kebanyakan karyawan yang keluar berada pada rentang umur 25-35 tahun
       *   Kebanyakan karyawan berjenis kelamin laki-laki dan kebanyakan karyawan yang keluar juga berjenis kelamin laki-laki.
       *   Kebanyakan karyawan lulusan sarjana dan kebanyakan karyawan yang keluar juga lulusan sarjana.
       *   Kebanyakan karyawan yang keluar berada pada rentang umur 25-35 tahun
       *   Kebanyakan karyawan menempuh pendidikan Life Sciences dan kebanyakan karyawan yang keluar juga menempuh pendidikan Life Sciences.
       *   Kebanyakan karyawan berasal dari department Research & Development dan kebanyakan karyawan yang keluar juga berasal dari department Research & Development.
       *   Kebanyakan karyawan memiliki jabatan Sales Executive sedangkan kebanyakan karyawan yang keluar memiliki jabatan Laboratory Technician.
       *   Semakin rendah level jabatan karyawan semakin banyak karyawan yang keluar.
       *    Kebanyakan karyawan jarang melakukan perjalanan bisnis dan kebanyakan karyawan yang keluar juga jarang melakukan perjalanan bisnis.
       *    Sebagian besar karyawan sudah menikan, namun karyawan yang single yang lebih banyak keluar.
       *    Kebanyakan karyawan memiliki gaji di bawah rata-rata. Semakin rendah gaji karyawan, semakin besar kecenderungan karyawan keluar.
       *    Semakin kecil persentase kenaikan gaji karyawan, semakin besar kecenderungan karyawan untuk keluar.
       *    Karyawan yang bekerja overtime paling banyak keluar.
       *    Kualitas kerja dan tingkat kepuasan karyawan berada pada rentang 3,3-3,9.

2.   Saran

  Saran yang dapat diterapkan perusahaan untuk mengurangi banyaknya karyawan yang keluar.
    *   Menaikan gaji dan persentase kenaikan gaji karyawan.
    *   Melakukan peningkatan efektivitas dan efisiensi pekerjaan agar jumlah karyawan yang bekerja overtime lebih sedikit.
    *   Memberikan kenyamanan lingkungan kerja mengingat tingkat kepuasan terhadap lingkungan kerja karyawan paling rendah.
    *   Melakukan kegiatan yang dapat meningkatkan kualitas kerja serta tingkat kepuasan karyawan.

## Menyimpan data untuk dashboard dan model prediksi

---

data yang sudah selesai diolah kemudian disimpan untuk membuat dashboard dan model prediksi
"""

employee_df

employee_df.columns

employee_df.to_csv("employee_data.csv", index=False)

"""## Model

Sumber data untuk digunakan dalam pembuatan model machine learning disimpan dalam dataframe employee_model_df. Lalu kolom yang tidak digunakan seperti EmployeeId dan Status dapat kita hapus.
"""

employee_model_df = employee_df
employee_model_df = employee_model_df.drop(columns = ["EmployeeId", "Status"])

"""### Mengatur categorical data

Untuk mengatur kolom berisi data categorical maka dilakukan transformasi OneHot Encoding pada masing-masing kolom data categorical. Data yang sudah ditransformasi disimpan dalam array X_transformed.
"""

employee_model_df_cat = employee_model_df.select_dtypes(include = ["object"])

employee_model_df_cat.columns

preprocessor = ColumnTransformer(transformers=[("onehot", OneHotEncoder(), employee_model_df_cat.columns)],
                                 remainder="passthrough")
X_transformed = preprocessor.fit_transform(employee_model_df.drop(columns = "Attrition"))
X_transformed

"""### Splitting data

Target merupakan kolom yang akan diprediksi, pada model ini dilakukan prediksi pada kolom Attrition. Selanjutnya dilakukan pemisahan data menjadi data training dan validation dengan perbandingan 65% data training banding 35% data validation. Dilakukan pengacakan dengan random state sebesar 42 dan dilakukan pemerataan pada target.
"""

target = employee_model_df["Attrition"]

X_train , X_val , y_train , y_val = train_test_split(X_transformed ,target, test_size = 0.35, random_state = 42, stratify = target)
print("X_train shape:", X_train.shape)
print("y_train shape:", y_train.shape)
print("X_test shape:", X_val.shape)
print("y_test shape:", y_val.shape)

"""### Modeling data

Model yang dibuat menggunakan Teknik Gradient Boosting Classifier yang mengkombinasikan model yang lemah sehingga menghasilkan prediksi yang kuat.
"""

# Pembuatan model
model = GradientBoostingClassifier(max_leaf_nodes = 3, min_samples_leaf = 4, loss ="exponential", n_estimators=174, learning_rate = 1, max_features=6, max_depth = 2, random_state = 9)

# Model fit
model.fit(X_train, y_train)

# Model Predict
#Training
y_train_pred = model.predict(X_train)
print(f"Training accuracy score:\n{accuracy_score(y_train, y_train_pred):.4f}")
print(f"Training ROC score:\n{roc_auc_score(y_train, y_train_pred).mean():.4f}")
# Validation
y_val_pred= model.predict(X_val)
print(f"Validation accuracy score:\n{accuracy_score(y_val, y_val_pred):.4f}")
print(f"Validation ROC score:\n{roc_auc_score(y_val, y_val_pred).mean():.4f}")

"""Dengan menggunakan model machine learning tersebut diperoleh akurasi training sebesar 98.4% dan akurasi validation sebesar 86.79% dengan nilai ROC training sebesar 95.6% dan nilai ROC validation sebesar 74.37%. Nilai ROC menunjukkan kemampuan model dalam memprediksi 2 jenis kategori. nilai ROC >70% sudah dapat diterima dalam penggunaan model.

## Evaluating

Berikut merupakan grafik plot PR Curves dan ROC Curves.
"""

from sklearn.metrics import precision_recall_curve, roc_curve
# Plot PR dan ROC Curves
precisions, recalls, thresholds = precision_recall_curve(y_val, model.predict(X_val))
plt.figure(figsize=(14, 25))
plt.subplot(4, 2, 1)
plt.plot(thresholds, precisions[:-1], "b--", label="Precision")
plt.plot(thresholds, recalls[:-1], "g--", label="Recall")
plt.xlabel("Threshold")
plt.legend(loc="upper left")
plt.title("Precision/Recall Tradeoff")

plt.subplot(4, 2, 2)
plt.plot(precisions, recalls)
plt.xlabel("Precision")
plt.ylabel("Recall")
plt.title("PR Curve: precisions/recalls tradeoff");

plt.subplot(4, 2, 3)
fpr, tpr, thresholds = roc_curve(y_val, model.predict(X_val))
plt.plot(fpr, tpr, linewidth=2, label=None)
plt.plot([0, 1], [0, 1], "k--")
plt.axis([0, 1, 0, 1])
plt.xlabel("False Positive Rate")
plt.ylabel("True Positive Rate")
plt.title("ROC Curve")

"""Dengan menggunakan model prediksi yang digunakan, diperoleh nilai confusion matrix sebagai berikut."""

# Confusion Matrix

CM = confusion_matrix(y_val,y_val_pred)
names = ["True Neg","False Pos","False Neg","True Pos"]
counts = [value for value in CM.flatten()]
percentages = ["{0:.2%}".format(value) for value in CM.flatten()/np.sum(CM)]
labels = [f"{v1}\n{v2}\n{v3}" for v1, v2, v3 in zip(names,counts,percentages)]
labels = np.asarray(labels).reshape(2,2)
sns.heatmap(CM,annot = labels, cmap = "viridis", fmt ="")

"""## Menyimpan model"""

filename = "model.sav"
joblib.dump(model, filename)